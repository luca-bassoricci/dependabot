# frozen_string_literal: true

# Security vulnerability container
#
# @!attribute id
#   @return [Integer]
# @!attribute identifiers
#   @return [Array]
# @!attribute package
#   @return [String]
# @!attribute package_ecosystem
#   @return [String]
# @!attribute package_manager
#   @return [String]
# @!attribute first_patched_version
#   @return [String]
# @!attribute vulnerable_version_range
#   @return [String]
# @!attribute severity
#   @return [String]
# @!attribute summary
#   @return [String]
# @!attribute description
#   @return [String]
# @!attribute permalink
#   @return [String]
# @!attribute origin
#   @return [String]
# @!attribute references
#   @return [Array]
# @!attribute published_at
#   @return [DateTime]
# @!attribute withdrawn_at
#   @return [DateTime]
class Vulnerability
  include Mongoid::Document

  unalias_attribute :id

  field :id, type: Integer
  field :identifiers, type: Array

  field :package, type: String
  field :package_ecosystem, type: String
  field :package_manager, type: String

  field :first_patched_version, type: String
  field :vulnerable_version_range, type: String
  field :severity, type: String

  field :summary, type: String
  field :description, type: String
  field :permalink, type: String
  field :origin, type: String
  field :references, type: Array

  field :published_at, type: DateTime
  field :withdrawn_at, type: DateTime

  delegate :vulnerable?, :fixed_by?, to: :advisory

  has_many :vulnerability_issues

  # Vulnerability hash representation compatible with dependabot pr builder
  #
  # @return [Hash]
  def to_hash
    @to_hash ||= {
      "title" => summary,
      "description" => description,
      "source_url" => permalink,
      "source_name" => origin == "UNSPECIFIED" ? nil : origin,
      "package" => package,
      "patched_versions" => [first_patched_version].compact,
      "affected_versions" => [vulnerable_version_range],
      "severity" => severity,
      "package_ecosystem" => package_ecosystem,
      "identifiers" => identifiers,
      "references" => references
    }
  end

  # Depenabot security advisory
  #
  # @return [Dependabot::SecurityAdvisory]
  def advisory
    @advisory ||= Dependabot::SecurityAdvisory.new(
      dependency_name: package,
      package_manager: package_manager,
      vulnerable_versions: [vulnerable_version_range],
      safe_versions: [first_patched_version].compact
    )
  end
end
