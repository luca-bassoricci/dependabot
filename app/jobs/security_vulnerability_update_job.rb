# frozen_string_literal: true

class SecurityVulnerabilityUpdateJob < ApplicationJob
  queue_as :vulnerability_update

  # Run update for local copy of Github security advisory database
  #
  # @param [String] package_ecosystem
  # @return [void]
  def perform(package_ecosystem)
    set_execution_context("vulnerability-sync: #{package_ecosystem}")

    log(:info, "Running local security vulnerability db update for package ecosystem: '#{package_ecosystem}'")

    vulnerabilities = Github::Vulnerabilities::Fetcher.call(package_ecosystem) do |nodes|
      log(:debug, "Updating local advisory database")
      nodes.each do |node|
        advisory = node.advisory

        vulnerability = Vulnerability.find_or_initialize_by(
          id: advisory.database_id,
          identifiers: advisory.identifiers.map(&:value),
          package: node.package.name,
          package_ecosystem: package_ecosystem,
          vulnerable_version_range: node.vulnerable_version_range
        )

        vulnerability.update_attributes!(
          severity: node.severity,
          summary: advisory.summary,
          description: advisory.description,
          permalink: advisory.permalink,
          origin: advisory.origin,
          references: advisory.references.map(&:url),
          first_patched_version: node.first_patched_version&.identifier,
          published_at: advisory.published_at,
          withdrawn_at: advisory.withdrawn_at
        )
      end
    end

    log(:info, "Synced information for #{vulnerabilities.size} security vulnerabilities")
  ensure
    clear_execution_context
  end
end
